---
# Weather MCP Server Kubernetes Deployment with K-Gateway Integration
# 
# This playbook demonstrates enterprise-grade MCP service deployment:
# - HTTP transport for production scalability
# - K-Gateway integration with authentication bypass
# - Service-based routing pattern (/weather-service/*)
# - High availability with multiple replicas
# - Comprehensive health monitoring and testing
#
# Prerequisites:
# - Kubernetes cluster with K-Gateway installed
# - kubectl configured with appropriate permissions
# - agentgateway HTTPRoute already configured
#
# Usage:
#   ansible-playbook deploy-weather-mcp.yml
#
- name: Deploy Weather MCP Server with Service-Based Routes
  hosts: localhost
  gather_facts: false
  vars_files:
    - ../../../group_vars/all.yml
  vars:
    kubeconfig_path: "{{ playbook_dir }}/../../../kubeconfig"
    kubectl_cmd: "kubectl --kubeconfig={{ kubeconfig_path }}"
    ai_namespace: "ai-services"
    kgateway_namespace: "kgateway-system"

    # Generic MCP runner image
    weather_image: "ghcr.io/geosp/mcp-weather:master"

  tasks:
    # Phase 0: Prerequisites
    - name: Check if kubeconfig exists
      stat:
        path: "{{ kubeconfig_path }}"
      register: kubeconfig_file

    - name: Fail if kubeconfig doesn't exist
      fail:
        msg: "Kubeconfig file not found at {{ kubeconfig_path }}"
      when: not kubeconfig_file.stat.exists

    # Phase 1: Deployment + Service (no secret needed)
    - name: Deploy Weather MCP server
      kubernetes.core.k8s:
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: weather-mcp
            namespace: "{{ ai_namespace }}"
            labels:
              app: weather-mcp
              mcp-type: weather
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: weather-mcp
            template:
              metadata:
                labels:
                  app: weather-mcp
                annotations:
                  prometheus.io/scrape: "true"
                  prometheus.io/port: "8000"
                  prometheus.io/path: "/metrics"
              spec:
                containers:
                  - name: weather-mcp
                    image: "{{ weather_image }}"
                    command: ["uvx"]
                    args:
                      - "--from"
                      - "git+https://github.com/geosp/mcp-weather"
                      - "mcp-weather"
                      - "--transport"
                      - "http"
                      - "--host"
                      - "0.0.0.0"
                      - "--port"
                      - "8000"
                    env:
                      - name: MCP_TRANSPORT
                        value: "http"
                      - name: MCP_PORT
                        value: "8000"
                      - name: MCP_HOST
                        value: "0.0.0.0"
                    ports:
                      - containerPort: 8000
                        name: http
                    resources:
                      requests:
                        cpu: 250m
                        memory: 512Mi
                      limits:
                        cpu: 500m
                        memory: 1Gi
                    livenessProbe:
                      httpGet:
                        path: /health
                        port: 8000
                      initialDelaySeconds: 30
                      periodSeconds: 10
                      timeoutSeconds: 5
                      failureThreshold: 3
                    readinessProbe:
                      httpGet:
                        path: /health
                        port: 8000
                      initialDelaySeconds: 5
                      periodSeconds: 5
                      timeoutSeconds: 3
                      failureThreshold: 3
        kubeconfig: "{{ kubeconfig_path }}"

    - name: Apply Weather MCP ClusterIP service
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: weather-mcp
            namespace: "{{ ai_namespace }}"
            labels:
              app: weather-mcp
          spec:
            selector:
              app: weather-mcp
            ports:
              - protocol: TCP
                port: 80
                targetPort: 8000
                name: http
            type: ClusterIP
        kubeconfig: "{{ kubeconfig_path }}"

    # Phase 2: Optional LoadBalancer for External Access
    - name: Create Weather MCP external LoadBalancer service
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: weather-mcp-external
            namespace: "{{ ai_namespace }}"
            labels:
              app: weather-mcp
              service: external
          spec:
            selector:
              app: weather-mcp
            ports:
              - protocol: TCP
                port: 8000
                targetPort: 8000
                name: http
            type: LoadBalancer
        kubeconfig: "{{ kubeconfig_path }}"

    # Phase 3: K-Gateway Static Backend (NO AUTHENTICATION REQUIRED)
    - name: Create Static Backend for Weather MCP (bypasses session management)
      kubernetes.core.k8s:
        definition:
          apiVersion: gateway.kgateway.dev/v1alpha1
          kind: Backend
          metadata:
            name: weather-static-backend
            namespace: "{{ ai_namespace }}"
            labels:
              app: weather-mcp
              backend-type: static
          spec:
            type: Static
            static:
              hosts:
                - host: weather-mcp.ai-services.svc.cluster.local
                  port: 80
        kubeconfig: "{{ kubeconfig_path }}"

    # Phase 4: HTTPRoutes for Weather Service (Service-Based Routing)
    - name: Create HTTPRoute for Weather Service (all endpoints)
      kubernetes.core.k8s:
        definition:
          apiVersion: gateway.networking.k8s.io/v1
          kind: HTTPRoute
          metadata:
            name: weather-service-route
            namespace: "{{ ai_namespace }}"
            labels:
              app: weather-mcp
              route-type: weather-service
          spec:
            parentRefs:
            - name: agentgateway
              namespace: "{{ kgateway_namespace }}"
            rules:
              - matches:
                  - path:
                      type: PathPrefix
                      value: /weather-service
                backendRefs:
                  - group: gateway.kgateway.dev
                    kind: Backend
                    name: weather-static-backend
                filters:
                  - type: URLRewrite
                    urlRewrite:
                      path:
                        type: ReplacePrefixMatch
                        replacePrefixMatch: /
        kubeconfig: "{{ kubeconfig_path }}"

    # Phase 5: TrafficPolicy to disable authentication
    - name: Create TrafficPolicy to disable authentication for Weather Service
      kubernetes.core.k8s:
        definition:
          apiVersion: gateway.kgateway.dev/v1alpha1
          kind: TrafficPolicy
          metadata:
            name: disable-weather-service-auth
            namespace: "{{ ai_namespace }}"
            labels:
              app: weather-mcp
              policy-type: service-auth-disable
          spec:
            targetRef:
              group: gateway.networking.k8s.io
              kind: HTTPRoute
              name: weather-service-route
            extAuth:
              disable: {}
            rbac:
              action: Allow
              policy:
                matchExpressions:
                - "true"
        kubeconfig: "{{ kubeconfig_path }}"

    # Phase 6: Wait for routes to be accepted
    - name: Wait for Weather Service Route to be accepted
      kubernetes.core.k8s_info:
        api_version: gateway.networking.k8s.io/v1
        kind: HTTPRoute
        name: weather-service-route
        namespace: "{{ ai_namespace }}"
        kubeconfig: "{{ kubeconfig_path }}"
      register: weather_route_status
      until:
        - weather_route_status.resources | length > 0
        - weather_route_status.resources[0].status.parents | length > 0
        - weather_route_status.resources[0].status.parents[0].conditions
          | selectattr('type','equalto','Accepted')
          | selectattr('status','equalto','True')
          | list | length > 0
      retries: 20
      delay: 5

    - name: Wait for deployment to be ready
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: weather-mcp
        namespace: "{{ ai_namespace }}"
        kubeconfig: "{{ kubeconfig_path }}"
      register: weather_deployment
      until:
        - weather_deployment.resources | length > 0
        - weather_deployment.resources[0].status.readyReplicas is defined
        - weather_deployment.resources[0].status.readyReplicas == 2
      retries: 30
      delay: 10

    # Phase 7: Get LoadBalancer IP
    - name: Get LoadBalancer external IP
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Service
        name: weather-mcp-external
        namespace: "{{ ai_namespace }}"
        kubeconfig: "{{ kubeconfig_path }}"
      register: weather_lb_service
      until:
        - weather_lb_service.resources | length > 0
        - weather_lb_service.resources[0].status.loadBalancer.ingress is defined
        - weather_lb_service.resources[0].status.loadBalancer.ingress | length > 0
      retries: 15
      delay: 10

    - name: Extract LoadBalancer IP
      set_fact:
        weather_lb_ip: "{{ weather_lb_service.resources[0].status.loadBalancer.ingress[0].ip }}"

    # Phase 8: Comprehensive Validation
    - name: Test Weather Service with proper routing
      kubernetes.core.k8s:
        definition:
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: weather-service-test
            namespace: "{{ ai_namespace }}"
          spec:
            ttlSecondsAfterFinished: 300
            template:
              spec:
                containers:
                - name: curl
                  image: curlimages/curl:latest
                  command:
                  - sh
                  - -c
                  - |
                    echo "=== Weather Service with Service-Based Routes Tests ==="
                    
                    # Wait for services to be ready
                    sleep 10
                    
                    echo "1. Testing health endpoint..."
                    for i in {1..5}; do
                      if curl -s -f --max-time 10 "http://agentgateway.mixwarecs-home.net/weather-service/health"; then
                        echo "✅ Health check: PASS"
                        break
                      else
                        echo "⏳ Health check attempt $i/5 failed, retrying..."
                        sleep 5
                      fi
                    done
                    
                    echo "2. Testing weather endpoint..."
                    for i in {1..5}; do
                      response=$(curl -s --max-time 15 "http://agentgateway.mixwarecs-home.net/weather-service/weather?location=Atlanta" || echo "")
                      if echo "$response" | grep -q "temperature"; then
                        echo "✅ Weather API: PASS"
                        break
                      else
                        echo "⏳ Weather API attempt $i/5 failed, retrying..."
                        echo "Response: $response"
                        sleep 5
                      fi
                    done
                    
                    echo "3. Testing OpenAPI spec..."
                    for i in {1..5}; do
                      response=$(curl -s --max-time 10 "http://agentgateway.mixwarecs-home.net/weather-service/openapi.json" || echo "")
                      if echo "$response" | grep -q "Weather MCP Server"; then
                        echo "✅ OpenAPI spec: PASS"
                        break
                      else
                        echo "⏳ OpenAPI spec attempt $i/5 failed, retrying..."
                        echo "Response: $response"
                        sleep 5
                      fi
                    done
                    
                    echo "Weather Service tests completed!"
                restartPolicy: Never
            backoffLimit: 1
        kubeconfig: "{{ kubeconfig_path }}"

    - name: Wait for Weather Service test job to complete
      kubernetes.core.k8s_info:
        api_version: batch/v1
        kind: Job
        name: weather-service-test
        namespace: "{{ ai_namespace }}"
        kubeconfig: "{{ kubeconfig_path }}"
      register: weather_test
      until:
        - weather_test.resources | length > 0
        - (weather_test.resources[0].status.succeeded is defined and weather_test.resources[0].status.succeeded > 0) or
          (weather_test.resources[0].status.failed is defined and weather_test.resources[0].status.failed > 0)
      retries: 20
      delay: 10

    - name: Clean up test job
      kubernetes.core.k8s:
        api_version: batch/v1
        kind: Job
        name: weather-service-test
        namespace: "{{ ai_namespace }}"
        state: absent
        kubeconfig: "{{ kubeconfig_path }}"

    # Phase 9: Clean up old/conflicting resources
    - name: Remove old weather-api-route if it exists
      kubernetes.core.k8s:
        api_version: gateway.networking.k8s.io/v1
        kind: HTTPRoute
        name: weather-api-route
        namespace: "{{ ai_namespace }}"
        state: absent
        kubeconfig: "{{ kubeconfig_path }}"

    - name: Remove old weather-openapi-spec-route if it exists
      kubernetes.core.k8s:
        api_version: gateway.networking.k8s.io/v1
        kind: HTTPRoute
        name: weather-openapi-spec-route
        namespace: "{{ ai_namespace }}"
        state: absent
        kubeconfig: "{{ kubeconfig_path }}"

    - name: Remove old TrafficPolicies if they exist
      kubernetes.core.k8s:
        api_version: gateway.kgateway.dev/v1alpha1
        kind: TrafficPolicy
        name: "{{ item }}"
        namespace: "{{ ai_namespace }}"
        state: absent
        kubeconfig: "{{ kubeconfig_path }}"
      loop:
        - disable-weather-api-auth
        - disable-weather-openapi-auth
        - disable-weather-auth

    # Phase 10: Summary
    - name: Display Weather Service deployment summary
      debug:
        msg: |
          
          ============ Weather MCP Service with Service-Based Routes Complete ============
          
          Status: Production Ready (NO AUTHENTICATION REQUIRED)
          Backend Type: Static (bypasses K-Gateway session management)
          Replicas: 2 (High Availability)
          Health Checks: Configured
          Resource Limits: Set
          Service-Based Routing: ENABLED
          
          Access Points:
          - Internal: http://weather-mcp.ai-services.svc.cluster.local
          - Weather API: http://agentgateway.mixwarecs-home.net/weather-service/weather
          - Health Check: http://agentgateway.mixwarecs-home.net/weather-service/health
          - OpenAPI Spec: http://agentgateway.mixwarecs-home.net/weather-service/openapi.json
          - LoadBalancer: http://{{ weather_lb_ip }}:8000
          
          Service Endpoints:
          - GET /weather-service/weather?location=<city> - Weather data for any location
          - GET /weather-service/health - Health check endpoint
          - GET /weather-service/openapi.json - OpenAPI specification
          - GET /weather-service/ - API information endpoint
          
          OpenAPI Auto-Discovery:
          ✅ OpenAPI spec exposed at /weather-service/openapi.json
          ✅ Operation ID: get_weather_http_weather_get
          ✅ Parameters: location (required string)
          ✅ Ready for MCP tool conversion via AgentGateway
          
          Weather Provider: Open-Meteo (Free, No API Key Required)
          Authentication: DISABLED (Static backend bypasses session management)
          
          Test Commands:
          curl http://agentgateway.mixwarecs-home.net/weather-service/weather?location=Atlanta
          curl http://agentgateway.mixwarecs-home.net/weather-service/health
          curl http://agentgateway.mixwarecs-home.net/weather-service/openapi.json
          curl http://{{ weather_lb_ip }}:8000/health
          
          =======================================================================