---
# Weather REST API Server Cleanup Playbook
# 
# This playbook removes weather REST API resources deployed by deploy-weather-rest-api.yml
# Specifically handles:
# - MCP Backend with OpenAPI target
# - Services with appProtocol: http
# - CORS-enabled TrafficPolicy
# - REST API route configuration
# 
# Useful for:
# - Development iterations with REST API
# - Testing different OpenAPI configurations
# - Troubleshooting REST deployment issues
# - Switching from REST back to MCP-only
# - Complete REST API environment reset
#
# Prerequisites:
# - Kubernetes cluster access
# - kubectl configured with appropriate permissions
# - Same kubeconfig used for REST API deployment
#
# Usage:
#   ansible-playbook cleanup-weather-rest-api.yml
#   ansible-playbook cleanup-weather-rest-api.yml --extra-vars "force_cleanup=true"
#
- name: Cleanup Weather REST API Server Resources
  hosts: localhost
  gather_facts: false
  vars_files:
    - ../../../group_vars/all.yml
  vars:
    kubeconfig_path: "{{ playbook_dir }}/../../../kubeconfig"
    kubectl_cmd: "kubectl --kubeconfig={{ kubeconfig_path }}"
    ai_namespace: "ai-services"
    kgateway_namespace: "kgateway-system"
    
    # REST API service configuration (must match deployment)
    service_name: "weather-rest-api"
    
    # Cleanup confirmation (can be overridden with --extra-vars "force_cleanup=true")
    force_cleanup: false

  tasks:
    # Phase 0: Prerequisites and Confirmation
    - name: Check if kubeconfig exists
      stat:
        path: "{{ kubeconfig_path }}"
      register: kubeconfig_file

    - name: Fail if kubeconfig doesn't exist
      fail:
        msg: "Kubeconfig file not found at {{ kubeconfig_path }}"
      when: not kubeconfig_file.stat.exists

    - name: Confirm cleanup operation
      pause:
        prompt: |
          
          ‚ö†Ô∏è  WARNING: This will remove the following Weather REST API resources ‚ö†Ô∏è
          
          Resources to be deleted (OpenAPI-integrated REST API):
          - TrafficPolicy: {{ service_name }}-policy (with CORS)
          - HTTPRoute: {{ service_name }}-route
          - Backend: {{ service_name }}-backend (MCP with OpenAPI target)
          - Service: {{ service_name }} (appProtocol: http)
          - Deployment: {{ service_name }}
          
          Namespace: {{ ai_namespace }}
          Service Type: REST API (OpenAPI integration)
          Backend Type: MCP with OpenAPI target
          
          Continue with cleanup? (yes/no)
      register: cleanup_confirmation
      when: not (force_cleanup | default(false) | bool)

    - name: Check cleanup confirmation
      fail:
        msg: "Cleanup operation cancelled by user"
      when: 
        - not (force_cleanup | default(false) | bool)
        - cleanup_confirmation.user_input | lower not in ['yes', 'y']

    # Phase 1: Remove TrafficPolicy (must be removed before HTTPRoute)
    - name: Remove REST API TrafficPolicy
      kubernetes.core.k8s:
        api_version: gateway.kgateway.dev/v1alpha1
        kind: TrafficPolicy
        name: "{{ service_name }}-policy"
        namespace: "{{ ai_namespace }}"
        state: absent
        kubeconfig: "{{ kubeconfig_path }}"
        wait: true
        wait_timeout: 30
      ignore_errors: true

    # Phase 2: Remove HTTPRoute
    - name: Remove REST API HTTPRoute
      kubernetes.core.k8s:
        api_version: gateway.networking.k8s.io/v1
        kind: HTTPRoute
        name: "{{ service_name }}-route"
        namespace: "{{ ai_namespace }}"
        state: absent
        kubeconfig: "{{ kubeconfig_path }}"
        wait: true
        wait_timeout: 30
      ignore_errors: true

    # Phase 3: Remove MCP Backend (with OpenAPI target)
    - name: Remove REST API Backend
      kubernetes.core.k8s:
        api_version: gateway.kgateway.dev/v1alpha1
        kind: Backend
        name: "{{ service_name }}-backend"
        namespace: "{{ ai_namespace }}"
        state: absent
        kubeconfig: "{{ kubeconfig_path }}"
        wait: true
        wait_timeout: 30
      ignore_errors: true

    # Phase 4: Remove Service
    - name: Remove REST API Service
      kubernetes.core.k8s:
        api_version: v1
        kind: Service
        name: "{{ service_name }}"
        namespace: "{{ ai_namespace }}"
        state: absent
        kubeconfig: "{{ kubeconfig_path }}"
        wait: true
        wait_timeout: 60
      ignore_errors: true

    # Phase 5: Remove Deployment
    - name: Remove Weather REST API Deployment
      kubernetes.core.k8s:
        api_version: apps/v1
        kind: Deployment
        name: "{{ service_name }}"
        namespace: "{{ ai_namespace }}"
        state: absent
        kubeconfig: "{{ kubeconfig_path }}"
        wait: true
        wait_timeout: 120
      ignore_errors: true

    # Phase 6: Verify cleanup completion
    - name: Wait for pods to be terminated
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        namespace: "{{ ai_namespace }}"
        label_selectors:
          - "app={{ service_name }}"
        kubeconfig: "{{ kubeconfig_path }}"
      register: remaining_pods
      until: remaining_pods.resources | length == 0
      retries: 12
      delay: 5
      ignore_errors: true

    # Phase 7: Final verification and cleanup report
    - name: Check for remaining REST API resources
      kubernetes.core.k8s_info:
        api_version: "{{ item.api_version }}"
        kind: "{{ item.kind }}"
        namespace: "{{ ai_namespace }}"
        kubeconfig: "{{ kubeconfig_path }}"
      register: remaining_resources
      loop:
        - api_version: apps/v1
          kind: Deployment
        - api_version: v1
          kind: Service
        - api_version: gateway.networking.k8s.io/v1
          kind: HTTPRoute
        - api_version: gateway.kgateway.dev/v1alpha1
          kind: TrafficPolicy
        - api_version: gateway.kgateway.dev/v1alpha1
          kind: Backend

    - name: Filter REST API related resources
      set_fact:
        rest_api_resources: >-
          {%- set resources = [] -%}
          {%- for result in remaining_resources.results -%}
            {%- for resource in result.resources -%}
              {%- if service_name in resource.metadata.name -%}
                {%- set _ = resources.append({
                  'kind': result.item.kind,
                  'name': resource.metadata.name,
                  'namespace': resource.metadata.namespace
                }) -%}
              {%- endif -%}
            {%- endfor -%}
          {%- endfor -%}
          {{ resources | to_json }}

    # Phase 8: Display cleanup summary
    - name: Display cleanup summary
      debug:
        msg: |
          
          ============ Weather REST API Cleanup Complete ============
          
          {% set parsed_resources = rest_api_resources | from_json if rest_api_resources is string else rest_api_resources %}
          {% if parsed_resources | length == 0 %}
          ‚úÖ CLEANUP SUCCESSFUL - All REST API resources removed
          {% else %}
          ‚ö†Ô∏è  CLEANUP INCOMPLETE - Remaining resources found
          {% for resource in parsed_resources %}
          - {{ resource.kind }}/{{ resource.name }}
          {% endfor %}
          {% endif %}
          
          Resources Processed:
          ‚úÖ TrafficPolicy: {{ service_name }}-policy (with CORS)
          ‚úÖ HTTPRoute: {{ service_name }}-route
          ‚úÖ Backend: {{ service_name }}-backend (MCP with OpenAPI target)
          ‚úÖ Service: {{ service_name }} (appProtocol: http)
          ‚úÖ Deployment: {{ service_name }}
          
          Service Details:
          üì¶ Service Name: {{ service_name }}
          üéØ Service Type: REST API (OpenAPI integration)
          üåê Namespace: {{ ai_namespace }}
          üöÄ Backend Type: MCP with OpenAPI target
          üîß Cleanup Mode: {{ 'Forced' if (force_cleanup | default(false) | bool) else 'Interactive' }}
          
          {% if parsed_resources | length == 0 %}
          üéâ REST API environment is clean and ready for fresh deployment!
          
          Next steps:
          1. Run: ansible-playbook deploy-weather-rest-api.yml
          2. Or deploy Dynamic MCP: ansible-playbook deploy-weather-mcp-dynamic.yml
          3. Or deploy Static MCP: ansible-playbook deploy-weather-mcp-only.yml
          4. Or modify REST API configuration and redeploy
          {% else %}
          ‚ö†Ô∏è  Manual cleanup may be required for remaining resources.
          
          Check manually:
          kubectl get all,httproutes,trafficpolicies,backends -n {{ ai_namespace }} | grep {{ service_name }}
          {% endif %}
          
          =======================================================================